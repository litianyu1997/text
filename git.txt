git mv [文件名1] [文件名2]
重命名文件

git mv [文件名] [新目录文件名]
将文件移动到新目录下

git chekcout HEAD -- [文件名]
把文件恢复到最近的一次提交

git checkout HEAD^ -- [文件名]
把文件恢复到最近的一次提交的上一次提交

git revert [id]
恢复到[id]提交

git rm [文件名]  删除(未提交到本地库)
git reset HEAD [文件名] 将待删除的文件从暂存区恢复到工作区
git checkout -- [文件名] 将工作区的修改丢弃掉

git reset --soft/hard/mixed
soft 提交到了暂存区
mixed 没有提交到暂存区
hard 提交到了本地库

git log --oneline --decorate --all
查看所有分支上的提交

git merge abort
放弃合并

git branch -m [分支名] [新分支名]
重命名分支名

git branch -d [分支名]
删除分支

git log --oneline -x
只显示x条

git log --oneline --author="x"
只显示x的提交

git log --oneline --grep='x'
只显示备注带有x的提交

git log --oneline --before='20xx-xx-xx'
只显示20xx-xx-xx之前的提交

git log --oneline --before='1 week'
只显示一周以前的提交

git log --oneline --graph
显示图形效果

git config --global alias.co checkout
~/.gitconfig 查看
global 全局
把checkout 简化为 co （设置命令别名）
vim~/.bash_profile
alias gco='git checkout'

git config --global core.excludesfile ~/.gitgonore-global
vim~/.gitignore_global
.DS_Store
touch .Ds_Store
ls
git status
告诉git在全局范围内忽略掉.DS——Store文件

vim.gitignore
*.log
git add/commit -m
touch access.log
ls
git status
告诉git忽略掉.log的文件（不会取消跟踪已经被跟踪的文件）

Ctrl+l 清屏

获得版本库
git init  初始化一个空的仓库
git clone 克隆远程仓库到本地

版本管理
git add		已修改的文件提交到暂存区
git commit 	暂存区的文件提交到本地库
git rm		删除版本库中特定的文件

查看信息
git help 获取帮助
git log  查看提交日志
git diff 比较文件在不同状态下的差别

远程协作
git pull 从远程库拉取文件到本地版本库
git push 从本地版本库推送文件到远程库

rm -rf [文件名] 删除文件内所有子目录及其内文件

echo 'x' > [文件名]
将文件内容改为x，文件重定向

settings.properties
*.b
!a.b
忽略以.b结尾的文件，a.b除外




